{"ast":null,"code":"var _jsxFileName = \"/home/professor/Desktop/pavani/client/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import io from 'socket.io-client';\n\n// // Connect to the Socket.IO server at localhost:5000\n// const socket = io('http://localhost:5000');\n\n// function App() {\n//   // State to store user's name\n//   const [name, setName] = useState('');\n//   // State to store the current message typed by the user\n//   const [message, setMessage] = useState('');\n//   // State to store the list of all messages exchanged in the chat\n//   const [messages, setMessages] = useState([]); \n//   // State to check if the user has entered their name\n//   const [isNameSet, setIsNameSet] = useState(false);\n\n//   // useEffect will run once when the component is first rendered\n//   useEffect(() => {\n//     // When a new chat message is received from the server, add it to the messages array\n//     socket.on('chatMessage', (data) => {\n//       setMessages((prevMessages) => [...prevMessages, data]);\n//     });\n\n//     // Clean up the socket listener when the component is unmounted (e.g. when the user leaves the page)\n//     return () => {\n//       socket.off('chatMessage');\n//     };\n//   }, []); // Empty array ensures this effect runs only once\n\n//   // Function to handle form submission when user enters their name\n//   const handleNameSubmit = (e) => {\n//     e.preventDefault(); // Prevents page from reloading\n//     if (name) {\n//       setIsNameSet(true); // After entering the name, show the chat window\n//     }\n//   };\n\n//   // Function to send a message when the user submits the message form\n//   const sendMessage = (e) => {\n//     e.preventDefault(); // Prevents page from reloading\n//     if (message) {\n//       // Send the name and message to the server\n//       socket.emit('chatMessage', { name, message });\n//       setMessage(''); // Clear the input field after sending the message\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {/* If the user hasn't entered a name yet, show the name input form */}\n//       {!isNameSet ? (\n//         <form onSubmit={handleNameSubmit}>\n//           <h2>Enter your name to join the chat</h2>\n//           <input\n//             type=\"text\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             placeholder=\"Enter your name\"\n//             required\n//           />\n//           <button type=\"submit\">Join Chat</button>\n//         </form>\n//       ) : (\n//         // If the name is set, show the chat window\n//         <div className=\"chat-window\">\n//           <h1>Welcome, {name}!</h1>\n//           <div className=\"messages\">\n//             {/* Display each message in the chat */}\n//             {messages.map((msg, index) => (\n//               <div key={index}>\n//                 <strong>{msg.name}: </strong>{msg.message}\n//               </div>\n//             ))}\n//           </div>\n//           <form onSubmit={sendMessage}>\n//             <input\n//               type=\"text\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//               placeholder=\"Enter your message\"\n//               required\n//             />\n//             <button type=\"submit\">Send</button>\n//           </form>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Define a state variable\n  const [count, setCount] = useState(0);\n\n  // Define a regular variable\n  const message = \"Hello, welcome to my React app!\";\n\n  // Function to handle button click\n  const incrementCount = () => {\n    setCount(count + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCount,\n      children: \"Increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","count","setCount","message","incrementCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/professor/Desktop/pavani/client/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import io from 'socket.io-client';\n\n// // Connect to the Socket.IO server at localhost:5000\n// const socket = io('http://localhost:5000');\n\n// function App() {\n//   // State to store user's name\n//   const [name, setName] = useState('');\n//   // State to store the current message typed by the user\n//   const [message, setMessage] = useState('');\n//   // State to store the list of all messages exchanged in the chat\n//   const [messages, setMessages] = useState([]); \n//   // State to check if the user has entered their name\n//   const [isNameSet, setIsNameSet] = useState(false);\n\n//   // useEffect will run once when the component is first rendered\n//   useEffect(() => {\n//     // When a new chat message is received from the server, add it to the messages array\n//     socket.on('chatMessage', (data) => {\n//       setMessages((prevMessages) => [...prevMessages, data]);\n//     });\n\n//     // Clean up the socket listener when the component is unmounted (e.g. when the user leaves the page)\n//     return () => {\n//       socket.off('chatMessage');\n//     };\n//   }, []); // Empty array ensures this effect runs only once\n\n//   // Function to handle form submission when user enters their name\n//   const handleNameSubmit = (e) => {\n//     e.preventDefault(); // Prevents page from reloading\n//     if (name) {\n//       setIsNameSet(true); // After entering the name, show the chat window\n//     }\n//   };\n\n//   // Function to send a message when the user submits the message form\n//   const sendMessage = (e) => {\n//     e.preventDefault(); // Prevents page from reloading\n//     if (message) {\n//       // Send the name and message to the server\n//       socket.emit('chatMessage', { name, message });\n//       setMessage(''); // Clear the input field after sending the message\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {/* If the user hasn't entered a name yet, show the name input form */}\n//       {!isNameSet ? (\n//         <form onSubmit={handleNameSubmit}>\n//           <h2>Enter your name to join the chat</h2>\n//           <input\n//             type=\"text\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             placeholder=\"Enter your name\"\n//             required\n//           />\n//           <button type=\"submit\">Join Chat</button>\n//         </form>\n//       ) : (\n//         // If the name is set, show the chat window\n//         <div className=\"chat-window\">\n//           <h1>Welcome, {name}!</h1>\n//           <div className=\"messages\">\n//             {/* Display each message in the chat */}\n//             {messages.map((msg, index) => (\n//               <div key={index}>\n//                 <strong>{msg.name}: </strong>{msg.message}\n//               </div>\n//             ))}\n//           </div>\n//           <form onSubmit={sendMessage}>\n//             <input\n//               type=\"text\"\n//               value={message}\n//               onChange={(e) => setMessage(e.target.value)}\n//               placeholder=\"Enter your message\"\n//               required\n//             />\n//             <button type=\"submit\">Send</button>\n//           </form>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  // Define a state variable\n  const [count, setCount] = useState(0);\n\n  // Define a regular variable\n  const message = \"Hello, welcome to my React app!\";\n\n  // Function to handle button click\n  const incrementCount = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{message}</h1>\n      <p>Count: {count}</p>\n      <button onClick={incrementCount}>Increment</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMO,OAAO,GAAG,iCAAiC;;EAEjD;EACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BF,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;EAED,oBACEH,OAAA;IAAKO,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBR,OAAA;MAAAQ,QAAA,EAAKH;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClBZ,OAAA;MAAAQ,QAAA,GAAG,SAAO,EAACL,KAAK;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBZ,OAAA;MAAQa,OAAO,EAAEP,cAAe;MAAAE,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV;AAACV,EAAA,CAnBQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAqBZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}